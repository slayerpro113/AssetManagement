@using System.Drawing
@using Data.Entities
@using DevExpress.XtraExport.Helpers
@model IList<Data.Entities.Asset>
@Html.DevExpress().GridView(settings => {
    settings.Name = "InStockGrid";
    settings.CallbackRouteValues = new { Controller = "Asset", Action = "CallBackAssetsInStock" };
    settings.KeyFieldName = "AssetID";
    settings.Width = Unit.Percentage(100);
    settings.SettingsLoadingPanel.Mode = GridViewLoadingPanelMode.Disabled;

    //Custom css
    settings.Styles.Header.BackColor = System.Drawing.ColorTranslator.FromHtml("#476482");
    settings.Styles.Header.ForeColor = Color.White;
    // Hover
    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Styles.RowHotTrack.BackColor = System.Drawing.ColorTranslator.FromHtml("#f9fdff");
    settings.Styles.RowHotTrack.Font.Bold = true;

    settings.Settings.ShowGroupPanel = true;
    settings.SettingsBehavior.AllowFocusedRow = false;

    settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;
    settings.SettingsDetail.ShowDetailRow = true;
    settings.SettingsPager.PageSize = 5;

    //filter
    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true;
    settings.CommandColumn.ShowClearFilterButton = true;


    settings.Toolbars.Add(toolbar =>
    {
        toolbar.Enabled = true;
        toolbar.Position = GridToolbarPosition.Top;
        toolbar.ItemAlign = GridToolbarItemAlign.Right;
        toolbar.Items.Add(i =>
        {
            i.BeginGroup = true;
            i.SetTemplateContent(c =>
            {
                Html.DevExpress().ButtonEdit(s =>
                {
                    s.Name = "search";
                    s.Properties.NullText = "Search...";
                    s.Properties.Buttons
                        .Add()
                        .Image.IconID = DevExpress.Web.ASPxThemes.IconID.FindFind16x16gray;
                }).Render();
            });
        });
    });

    settings.Columns.Add(c =>
    {
        c.FieldName = "AssetID";
        c.Caption = "AssetID";
        c.Settings.AllowAutoFilter = DefaultBoolean.False;
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.Visible = false;
    });

    settings.Columns.Add(c =>
    {
        c.FieldName = "Barcode";
        c.Caption = "Barcode";
        c.Settings.AllowAutoFilter = DefaultBoolean.False;
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.Width = 130;

    });

    settings.Columns.Add(c =>
    {
        c.FieldName = "AssetCategory";
        c.Caption = "Type";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.EditorProperties().ComboBox(cb =>
        {
            cb.DataSource = PoRequest.GetCategories();
            cb.TextField = "CategoryName";
            cb.ValueField = "CategoryName";
            cb.DropDownStyle = DropDownStyle.DropDown;
        });
        c.Width = 150;
    });

    settings.Columns.Add(c =>
    {
        c.FieldName = "AssetName";
        c.Caption = "Name";

        c.SetDataItemTemplateContent(p =>
        {
            int assetId = (int) DataBinder.Eval(p.DataItem, "AssetID");
            var asset = Model.FirstOrDefault(_ => _.AssetID == assetId);

            ViewContext.Writer.Write(
                "<img src=\"/Image/Categories/" + HttpUtility.UrlDecode(asset.AssetImage) + "\" class='avatar' >" +

                "&nbsp&nbsp<a &nbsp&nbsp<a style='text-decoration:none'>" + asset .AssetName + "</a>"
                );
        });
        c.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.Width = 240;
    });

    settings.Columns.Add(c =>
    {
        c.FieldName = "AssetStatusName";
        c.Caption = "Status";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.EditorProperties().ComboBox(cb => {
            cb.DataSource = Asset.GetStatuses();
            cb.TextField = "StatusName";
            cb.ValueField = "StatusName";
            cb.DropDownStyle = DropDownStyle.DropDown;
        });
        c.SetDataItemTemplateContent(r =>
        {
            int assetId = (int)DataBinder.Eval(r.DataItem, "AssetID");
            var asset = Model.FirstOrDefault(_ => _.AssetID == assetId);
            if (asset.AssetStatusID == 1)
            {
                ViewContext.Writer.Write("<button type='button' class='btn btn-success btn-xs'>" + HttpUtility.UrlDecode(r.Text) + "</button>");
            }
            else
            {
                ViewContext.Writer.Write("<button type='button' class='btn btn-info btn-xs'>" + HttpUtility.UrlDecode(r.Text) + "</button>");

            }
        });
        c.Width = 120;

    });


    settings.Columns.Add(c =>
    {
        c.FieldName = "PurchaseDate";
        c.Caption = "Date Purchase";
        c.Settings.AllowAutoFilter = DefaultBoolean.False;
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.Settings.AllowAutoFilter = DefaultBoolean.False;
        c.Width = 110;
    });

    settings.Columns.Add(c =>
    {
        c.FieldName = "PercentDepreciation";
        c.Caption = "Progress Depreciation";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.SetDataItemTemplateContent(p =>
        {
            int assetId = (int)DataBinder.Eval(p.DataItem, "AssetID");
            var asset = Model.FirstOrDefault(_ => _.AssetID == assetId);

            if (asset.AssetStatusID == 1)
            {
                ViewContext.Writer.Write(
                    "<div class='project_progress'>"+
                    "<div class='progress progress_sm'>" +
                    "<div class='progress-bar bg-green' role='progressbar' style='width:"+ asset.PercentDepreciation +"%' ></div></div>" +
                    "</div>" +
                    "</div>"+
                    "<small> "+ asset.PercentDepreciation + " % Complete </small>"
                    );
            }
            else
            {
                ViewContext.Writer.Write(
                    "<div class='project_progress'>" +
                    "<div class='progress progress_sm'>" +
                    "<div class='progress-bar bg-green' role='progressbar'  style='width:0%'></div></div>" +
                    "</div>" +
                    "</div>" +
                    "<small>0% Complete </small>"
                    );
            }
        });

        c.Settings.AllowAutoFilter = DefaultBoolean.False;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        c.Width = 100;
    });

    settings.Columns.Add(c =>
    {
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.SetDataItemTemplateContent(p =>
        {
            int assetId = (int)DataBinder.Eval(p.DataItem, "AssetID");
            var asset = Model.FirstOrDefault(_ => _.AssetID == assetId);

            if (asset.Barcode != null && asset.MonthDepreciation != null)
            {
                ViewContext.Writer.Write(
                    "<button type='button' class='btn btn-round btn-default' data-toggle='modal' data-target='#assignPopup'" +
                    " onclick =\"OpenAssignPopup(" + assetId + ",'" + asset.Barcode + "', '" + asset.AssetName + "')\"  >Assign</button>"
                    );
            }
            else
            {
                ViewContext.Writer.Write(
                    "<button type='button' class='btn btn-round btn-default' data-toggle='modal' data-target='#depreciatePopup'" +
                    " onclick =\"OpenDepreciatePopup(" + assetId + ",'" + asset.AssetName + "')\" >Depreciate</button>"
                    );
            }
        });
        c.Width = 100;
    });

    settings.SetDetailRowTemplateContent(c =>
    {
        ViewContext.Writer.Write(
            "<h4>Depreciation Detail<h5>"+
            "<div class='depreciation'>"
        );

        int assetId = (int) DataBinder.Eval(c.DataItem, "AssetID");
        var asset = Model.FirstOrDefault(_ => _.AssetID == assetId);
        var assets = new List<Asset>();
        assets.Add(asset);
        Html.RenderPartial("_DepreciationPartial",  assets);

        ViewContext.Writer.Write(
            "</div>"+
            "<br>"+
            "<h4>History<h5>"+
            "<div class='history'>"
            );

        Html.RenderAction("ShowHistories",  new { assetId = DataBinder.Eval(c.DataItem, "AssetID") });
        ViewContext.Writer.Write(
            "</div>"
            );
    });

    settings.SettingsPager.Position = PagerPosition.Bottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "5", "7", "9" };
    settings.SettingsSearchPanel.CustomEditorName = "search";
}).Bind(Model).GetHtml()





