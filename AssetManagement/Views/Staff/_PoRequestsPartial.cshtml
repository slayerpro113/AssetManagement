@using System.Drawing
@using Data.Entities
@using Data.Utilities
@using Image = System.Web.UI.WebControls.Image
@model IList<Data.Entities.PoRequest>
@Html.DevExpress().GridView(settings => {
    settings.Name = "gvFilterRow";
    settings.SettingsBehavior.AllowFocusedRow = false;
    settings.SettingsLoadingPanel.Mode = GridViewLoadingPanelMode.Disabled;
    settings.Styles.Header.BackColor = System.Drawing.ColorTranslator.FromHtml("#476482");
    settings.Styles.Header.ForeColor = Color.White;

    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Styles.RowHotTrack.BackColor = System.Drawing.ColorTranslator.FromHtml("#f4f4f4");
    settings.Styles.RowHotTrack.Font.Bold = true;

    settings.CallbackRouteValues = new { Controller = "Staff", Action = "GetPoRequestsFromUsersPartial" };
    settings.Width = Unit.Percentage(100);

    settings.KeyFieldName = "PoRequestID";

    settings.Columns.Add(c =>
    {
        c.FieldName = "EmployeeName";
        c.SetDataItemTemplateContent(p =>
        {
            int poRequestId = (int) DataBinder.Eval(p.DataItem, "PoRequestID");
            var poRequest = Model.FirstOrDefault(_ => _.PoRequestID == poRequestId);

            ViewContext.Writer.Write(
                "<img src=\"/Image/" + HttpUtility.UrlDecode(poRequest.Employee.Image) + "\" class='avatar' alt='Avatar'>     "+

                "<a style='text-decoration: none'>" + poRequest.Employee.FullName + "</a>"+
                "<br/>"+
                "<small>On <i>"+ poRequest.CreatedDate.ToLongDateString() +"</i></small>"
                );
        });
        c.Caption = "Requested By";
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.Width = 230;
    });

    settings.Columns.Add(c => {
        c.FieldName = "CategoryName";
        c.Caption = "Type";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.Width = 150;
        c.EditorProperties().ComboBox(cb => {
            cb.DataSource = PoRequest.GetCategories();
            cb.TextField = "CategoryName";
            cb.ValueField = "CategoryName";
            cb.DropDownStyle = DropDownStyle.DropDown;
        });
    });

    settings.Columns.Add(c => {
        c.FieldName = "Description";
        c.Caption = "Rationale";
        c.Settings.AllowAutoFilter = DefaultBoolean.False;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.Width = 300;
    });

    //    settings.Columns.Add(c => {
    //        c.FieldName = "Quantity";
    //        c.Caption = "Available Assets";
    //        c.Settings.AllowAutoFilter = DefaultBoolean.False;
    //        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
    //        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
    //        c.Width = 60;
    //    });

    settings.Columns.Add(c =>
    {
        c.SetDataItemTemplateContent(p =>
        {
            int poRequestId = (int) DataBinder.Eval(p.DataItem, "PoRequestID");
            var poRequest = Model.FirstOrDefault(_ => _.PoRequestID == poRequestId);
            var quotes = poRequest.Quotes;

            ViewContext.Writer.Write(
                "<ul class='list-inline'>"
                );
            foreach (var quote in quotes)
            {
                ViewContext.Writer.Write(
                    "<li>"+
                    "<img class='avatar' alt='Avatar' src=\"/Image/Quotes/" + HttpUtility.UrlDecode(@quote.Image) + "\">"+
                    "</li>"
                    );
            }
            ViewContext.Writer.Write(
                "</ul>"
                );
        });
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.Caption = "Quote";
        c.Width = 150;
    });


    settings.Columns.Add(c =>
    {
        c.FieldName = "Status";
        c.Caption = "Status";
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.Width = 120;
        c.EditorProperties().ComboBox(cb => {
            cb.DataSource = PoRequest.GetStatuses();
            cb.TextField = "StatusName";
            cb.ValueField = "StatusName";
            cb.DropDownStyle = DropDownStyle.DropDown;
        });

        c.SetDataItemTemplateContent(p =>
        {
            int poRequestId = (int)DataBinder.Eval(p.DataItem, "PoRequestID");
            var poRequest = Model.FirstOrDefault(_ => _.PoRequestID == poRequestId);
           
            ViewContext.Writer.Write(
                "<button type='button' class='btn btn-info btn-sm'>In Progress</button>"
            );
        });
    });

    settings.Columns.Add(c =>
    {
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.SetDataItemTemplateContent(p =>
        {
            int poRequestId = (int)DataBinder.Eval(p.DataItem, "PoRequestID");
            var poRequest = Model.FirstOrDefault(_ => _.PoRequestID == poRequestId);
            var category = poRequest.CategoryName;
            var employeeId = poRequest.EmployeeID;
            var employeeName = poRequest.EmployeeName;

            if (poRequest.RequestStatusID != 4)
            {
                if (poRequest.Quantity != 0)
                {
                    ViewContext.Writer.Write(
                        "<button type='button' class='open-popup btn btn-round btn-default' data-toggle='modal' data-target='#assignPopup'" +
                        "onclick =\"OpenAssignPopup(" + poRequestId + "," + employeeId + ",'" + category + "','" + employeeName + "')\" >Assign <a class='quantity'>" + @poRequest.Quantity + "</a></button>"
                        );
                }
                else
                {
                    if (poRequest.Quotes.Count == 0)
                    {
                        ViewContext.Writer.Write(
                            "<button type='button' class='open-popup btn btn-round btn-default' data-toggle='modal' data-target='#quotePopup'" +
                            "onclick =\"OpenQuotePopup("+ poRequestId + ")\" >Quote</button>"
                            );
                    }
                    else
                    {
                        var userSession = (Employee) SessionHelper.GetSessionValue(Constant.UserSession);
                        
                        ViewContext.Writer.Write(
                            "<button type='button' class='open-popup btn btn-round btn-default' data-toggle='modal' data-target='#quotePopup'" +
                            "onclick =\"OpenQuotePopup(" + poRequestId + ")\" >Quote</button>"+
                            "&nbsp"+
                            "<button type='button' class='btn btn-round btn-primary' onclick =\"SubmitRequest(" + poRequestId + ", '"+ userSession.FullName + "')\" >Submit</button>"
                            );
                    }
                }
            }
        });
        c.Width = 120;
    });

    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true;
    settings.CommandColumn.ShowClearFilterButton = true;

    settings.SettingsPager.PageSize = 5;

    settings.SettingsPager.Position = PagerPosition.Bottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "5", "7", "9" };
}).Bind(Model).GetHtml()